# -*- coding: utf-8 -*-
"""update.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JXcZZ5f0Uc7YZx0_R-3X5qRZ3hW5AA9K
"""

# from google.colab import drive
# drive.mount('/content/drive')

import numpy as np
import pandas as pd
import os

import matplotlib.pyplot as plt
import seaborn as sns

import tensorflow as tf
from tensorflow import keras
from tensorflow.python.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
from sklearn.model_selection import train_test_split


from tensorflow.keras.applications import MobileNetV2

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input


from sklearn.metrics import classification_report,confusion_matrix,accuracy_score



import warnings
warnings.filterwarnings("ignore")

DIR = 'C:\\Users\\Deepesh sahu\\Desktop\\depoly\\Fish_Dataset'
classes = [i for i in os.listdir(DIR) if '.' not in i]
classes

label = []
path = []

for dirname, _,filenames in os.walk(DIR):
  for filename in filenames:
    if os.path.splitext(filename)[-1]=='.png':               
      if dirname.split()[-1]!='GT':                          
        label.append(os.path.split(dirname)[1])              
        path.append(os.path.join(dirname,filename))          
                                                             
                                                             
                                                              
df = pd.DataFrame(columns=['path','label'])                  
df['path']=path
df['label']=label

df.head()

df.path[0]

df.info()

df['label'].value_counts()

idx = 0
plt.figure(figsize=(15,12))
for unique_label in df['label'].unique():
  plt.subplot(3, 3, idx+1)
  plt.imshow(plt.imread(df[df['label']==unique_label].iloc[0,0]))
  plt.title(unique_label)
  plt.axis('off')
  idx+=1

train_df, test_df = train_test_split(df, train_size=0.8,shuffle=True,random_state=42)

print(train_df.shape)
print(test_df.shape)

train_generator = tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=preprocess_input, validation_split=0.2)
test_generator = tf.keras.preprocessing.image.ImageDataGenerator(preprocessing_function=preprocess_input)

train_images = train_generator.flow_from_dataframe(dataframe=train_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='categorical',batch_size=32,shuffle=True,seed=42,subset='training')
val_images = train_generator.flow_from_dataframe(dataframe=train_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='categorical',batch_size=32,shuffle=True,seed=42,subset='validation')
test_images = train_generator.flow_from_dataframe(dataframe=test_df, x_col='path', y_col='label', target_size=(224, 224), color_mode='rgb', class_mode='categorical',batch_size=32,shuffle=False)



pretrained_model = tf.keras.applications.MobileNetV2(
    input_shape=(224, 224, 3),
    include_top=False,
    weights='imagenet',                                     
    pooling='avg'
)
pretrained_model.trainable = False

inputs = pretrained_model.input


x = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)
x = tf.keras.layers.Dense(128, activation='relu')(x)
outputs = tf.keras.layers.Dense(9, activation='softmax')(x)                                    

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.summary()

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

history = model.fit(train_images,
                    validation_data=val_images,
                    epochs=1)
model.save('my_model.keras')

results = model.evaluate(test_images, verbose=0)
print("The Loss: {:.5f}".format(results[0]))
print("Test Accuracy: {:.2f}%".format(results[1] * 100))























































